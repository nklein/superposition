;;;; -*- mode: Common-Lisp; Syntax: ANSI-Common-Lisp -*-
;;;; test/arithmetic.lisp

(in-package #:superposition-test)

(nst:def-test-group addition-tests ()
  (nst:def-test can-add-independent-gaussians (:values (:equal 3.0)
                                                       (:equal 5.0))
    (let* ((a (make-gaussian-random-variable 1.0 2.0))
           (b (make-gaussian-random-variable 2.0 3.0))
           (c (+ a b)))
      (values (μ c)
              (σ² c))))

  (nst:def-test can-add-gaussian-to-number (:values (:equal 6.0)
                                                    (:equal 2.0))
    (let* ((a 5)
           (b (make-gaussian-random-variable 1.0 2.0))
           (c (+ a b)))
      (values (μ c)
              (σ² c))))

  (nst:def-test can-add-number-to-gaussian (:values (:equal 6.0)
                                                    (:equal 2.0))
    (let* ((a (make-gaussian-random-variable 1.0 2.0))
           (b 5)
           (c (+ a b)))
      (values (μ c)
              (σ² c))))
  (nst:def-test adding-zero-to-random-variable-is-identity (:true)
    (let ((a (make-gaussian-random-variable 1.0 2.0)))
      (eq a (+ 0 a)))))

(nst:def-test-group multiplication-tests ()
  (nst:def-test can-multiply-independent-gaussians (:values (:equal 2.0)
                                                            (:equal 17.0))
    (let* ((a (make-gaussian-random-variable 1.0 2.0))
           (b (make-gaussian-random-variable 2.0 3.0))
           (c (* a b)))
      (values (μ c)
              (σ² c))))

  (nst:def-test can-multiply-gaussian-to-number (:values (:equal 10.0)
                                                         (:equal 75.0))
    (let* ((a 5)
           (b (make-gaussian-random-variable 2.0 3.0))
           (c (* a b)))
      (values (μ c)
              (σ² c))))

  (nst:def-test can-multiply-number-to-gaussian (:values (:equal 10.0)
                                                         (:equal 75.0))
    (let* ((a (make-gaussian-random-variable 2.0 3.0))
           (b 5)
           (c (* a b)))
      (values (μ c)
              (σ² c))))

  (nst:def-test multiply-one-by-random-variable-is-identity (:true)
    (let ((a (make-gaussian-random-variable 1.0 2.0)))
      (eq a (* 1 a)))))
